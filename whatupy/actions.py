import base64
import hashlib
import json
import re
from importlib.resources import files


def camel_to_snake(name):
    name = re.sub("(.)([A-Z][a-z]+)", r"\1_\2", name)
    return re.sub("([a-z0-9])([A-Z])", r"\1_\2", name).lower()


def generate_filehash(data) -> str:
    return hashlib.sha256(data.encode('utf-8')).hexdigest()

def is_correct_hash(curhash):
    actions_source = files("whatupy").joinpath("whatupcore/src/actions.ts")
    with actions_source.open() as fd:
        actions_data = fd.read()
    return generate_filehash(actions_data) == curhash

def generate_actions():
    print("Auto-generating actions file")
    actions_source = files("whatupy").joinpath("whatupcore/src/actions.ts")
    with actions_source.open() as fd:
        actions_data = fd.read()
    source_hash = generate_filehash(actions_data)
    
    ACTIONS = {}
    EVENTS = {}
    actions_file = files("whatupy").joinpath("_actions.py")
    with actions_file.open('w+') as fd:
        fd.write(""" # AUTOGENERATED BY actions.py. DO NOT MODIFY BY HAND\n""")
        fd.write("import json\n")
        fd.write("import base64\n")
        fd.write("import typing as T\n")
        fd.write(f"{source_hash=}\n")
        for result in re.finditer(
            "(?P<action_name>[a-zA-Z]+) = '(?P<action_code>[^']+)',?", actions_data
        ):
            r = result.groupdict()
            key = camel_to_snake(r["action_name"])
            ACTIONS[key] = r["action_code"]
            EVENTS[r["action_code"]] = key
            fd.write(f"""{key} = '{r["action_code"]}'\n""")

        actions_enc = base64.b32hexencode(json.dumps(ACTIONS).encode('utf-8'))
        events_enc = base64.b32hexencode(json.dumps(EVENTS).encode('utf-8'))
        fd.write(f'{actions_enc=}\n')
        fd.write(f'{events_enc=}\n')
        fd.write(f"""ACTIONS: T.Dict[str, str] = json.loads(base64.b32hexdecode(actions_enc))\n""")
        fd.write(f"""EVENTS: T.Dict[str, str] = json.loads(base64.b32hexdecode(events_enc))\n""")


while True:
    try:
        from ._actions import source_hash
        if not is_correct_hash(source_hash):
            raise ImportError
        from ._actions import *
        break
    except ImportError:
        generate_actions()
