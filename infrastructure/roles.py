from pulumi import get_stack
import pulumi_gcp as gcp

org = gcp.organizations.get_organization(domain="digitalwitnesslab.org")
name = get_stack().title().replace("-", "")

artifact_downloader_role = gcp.organizations.IAMCustomRole(
    "artifact-downloader-role",
    role_id=f"artifactDownloaderRole{name}",
    title="Download targeted artifacts from the registry",
    description="A custom role to download artifacts from Artifact Registry",
    org_id=org.org_id,
    permissions=[
        "artifactregistry.repositories.downloadArtifacts",
    ],
)

biguquery_job_runner = gcp.organizations.IAMCustomRole(
    "bigquery-job-runner",
    role_id=f"bigQueryJobRunner{name}",
    title="BigQuery Job Runner Focused",
    description="A focused permission to allow running bigquery jobs (ie: sql statements) to get data",
    org_id=org.org_id,
    permissions=["bigquery.jobs.create"],
)

data_viewer_role = gcp.organizations.IAMCustomRole(
    "data-viewer-role",
    role_id=f"dataViewerRole{name}",
    title="WhatsApp Watch Data Viewer",
    description="User role for viewing/acessing and analyzing data",
    org_id=org.org_id,
    permissions=[
        "bigquery.datasets.create",
        "bigquery.datasets.get",
        "bigquery.datasets.getIamPolicy",
        "bigquery.jobs.create",
        "bigquery.jobs.list",
        "bigquery.models.getMetadata",
        "bigquery.models.list",
        "bigquery.readsessions.create",
        "bigquery.readsessions.getData",
        "bigquery.reservationAssignments.list",
        "bigquery.reservations.list",
        "bigquery.routines.get",
        "bigquery.routines.list",
        "bigquery.savedqueries.get",
        "bigquery.savedqueries.list",
        "bigquery.tables.get",
        "bigquery.tables.getData",
        "bigquery.tables.getIamPolicy",
        "bigquery.tables.list",
        "bigquery.transfers.get",
        "dataform.locations.get",
        "dataform.locations.list",
        "dataform.repositories.computeAccessTokenStatus",
        "dataform.repositories.create",
        "dataform.repositories.fetchHistory",
        "dataform.repositories.fetchRemoteBranches",
        "dataform.repositories.get",
        "dataform.repositories.getIamPolicy",
        "dataform.repositories.list",
        "dataform.repositories.queryDirectoryContents",
        "dataform.repositories.readFile",
        "dataform.workspaces.fetchFileDiff",
        "dataform.workspaces.fetchFileGitStatuses",
        "dataform.workspaces.fetchGitAheadBehind",
        "dataform.workspaces.get",
        "dataform.workspaces.getIamPolicy",
        "dataform.workspaces.list",
        "dataform.workspaces.queryDirectoryContents",
        "dataform.workspaces.readFile",
        "dataform.workspaces.searchFiles",
        "looker.instances.get",
        "looker.instances.login",
        "resourcemanager.projects.get",
        "resourcemanager.projects.list",
        "storage.folders.get",
        "storage.folders.list",
        "storage.managedFolders.get",
        "storage.managedFolders.list",
        "storage.objects.get",
        "storage.objects.list",
    ],
)

data_editor_role = gcp.organizations.IAMCustomRole(
    "data-editor-role",
    role_id=f"dataEditorRole{name}",
    title="WhatsApp Watch Data Editor",
    description="User role for admin level data editing and management",
    org_id=org.org_id,
    permissions=[
        "bigquery.datasets.create",
        "bigquery.datasets.get",
        "bigquery.datasets.getIamPolicy",
        "bigquery.jobs.create",
        "bigquery.models.delete",
        "bigquery.models.getMetadata",
        "bigquery.models.list",
        "bigquery.routines.delete",
        "bigquery.routines.get",
        "bigquery.routines.list",
        "bigquery.tables.create",
        "bigquery.tables.delete",
        "bigquery.tables.get",
        "bigquery.tables.getData",
        "bigquery.tables.getIamPolicy",
        "bigquery.tables.list",
        "bigquery.tables.update",
        "bigquery.tables.updateData",
        "dataform.locations.get",
        "dataform.locations.list",
        "dataform.repositories.computeAccessTokenStatus",
        "dataform.repositories.create",
        "dataform.repositories.fetchHistory",
        "dataform.repositories.fetchRemoteBranches",
        "dataform.repositories.get",
        "dataform.repositories.getIamPolicy",
        "dataform.repositories.list",
        "dataform.repositories.queryDirectoryContents",
        "dataform.repositories.readFile",
        "dataform.workspaces.fetchFileDiff",
        "dataform.workspaces.fetchFileGitStatuses",
        "dataform.workspaces.fetchGitAheadBehind",
        "dataform.workspaces.get",
        "dataform.workspaces.getIamPolicy",
        "dataform.workspaces.list",
        "dataform.workspaces.queryDirectoryContents",
        "dataform.workspaces.readFile",
        "dataform.workspaces.searchFiles",
        "looker.instances.get",
        "looker.instances.login",
        "orgpolicy.policy.get",
        "resourcemanager.projects.get",
        "resourcemanager.projects.list",
        "storage.managedFolders.list",
        "storage.objects.delete",
        "storage.objects.get",
        "storage.objects.list",
    ],
)
