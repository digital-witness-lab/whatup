// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: photo_cop.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PhotoCopClient is the client API for PhotoCop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoCopClient interface {
	// Checks the photo cop.
	CheckPhoto(ctx context.Context, in *CheckPhotoRequest, opts ...grpc.CallOption) (*PhotoCopDecision, error)
	GetPhotoHash(ctx context.Context, in *GetPhotoHashRequest, opts ...grpc.CallOption) (*PhotoCopHash, error)
}

type photoCopClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoCopClient(cc grpc.ClientConnInterface) PhotoCopClient {
	return &photoCopClient{cc}
}

func (c *photoCopClient) CheckPhoto(ctx context.Context, in *CheckPhotoRequest, opts ...grpc.CallOption) (*PhotoCopDecision, error) {
	out := new(PhotoCopDecision)
	err := c.cc.Invoke(ctx, "/photocop.PhotoCop/CheckPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoCopClient) GetPhotoHash(ctx context.Context, in *GetPhotoHashRequest, opts ...grpc.CallOption) (*PhotoCopHash, error) {
	out := new(PhotoCopHash)
	err := c.cc.Invoke(ctx, "/photocop.PhotoCop/GetPhotoHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoCopServer is the server API for PhotoCop service.
// All implementations must embed UnimplementedPhotoCopServer
// for forward compatibility
type PhotoCopServer interface {
	// Checks the photo cop.
	CheckPhoto(context.Context, *CheckPhotoRequest) (*PhotoCopDecision, error)
	GetPhotoHash(context.Context, *GetPhotoHashRequest) (*PhotoCopHash, error)
	mustEmbedUnimplementedPhotoCopServer()
}

// UnimplementedPhotoCopServer must be embedded to have forward compatible implementations.
type UnimplementedPhotoCopServer struct {
}

func (UnimplementedPhotoCopServer) CheckPhoto(context.Context, *CheckPhotoRequest) (*PhotoCopDecision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPhoto not implemented")
}
func (UnimplementedPhotoCopServer) GetPhotoHash(context.Context, *GetPhotoHashRequest) (*PhotoCopHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhotoHash not implemented")
}
func (UnimplementedPhotoCopServer) mustEmbedUnimplementedPhotoCopServer() {}

// UnsafePhotoCopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoCopServer will
// result in compilation errors.
type UnsafePhotoCopServer interface {
	mustEmbedUnimplementedPhotoCopServer()
}

func RegisterPhotoCopServer(s grpc.ServiceRegistrar, srv PhotoCopServer) {
	s.RegisterService(&PhotoCop_ServiceDesc, srv)
}

func _PhotoCop_CheckPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoCopServer).CheckPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photocop.PhotoCop/CheckPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoCopServer).CheckPhoto(ctx, req.(*CheckPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoCop_GetPhotoHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhotoHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoCopServer).GetPhotoHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/photocop.PhotoCop/GetPhotoHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoCopServer).GetPhotoHash(ctx, req.(*GetPhotoHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotoCop_ServiceDesc is the grpc.ServiceDesc for PhotoCop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoCop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photocop.PhotoCop",
	HandlerType: (*PhotoCopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPhoto",
			Handler:    _PhotoCop_CheckPhoto_Handler,
		},
		{
			MethodName: "GetPhotoHash",
			Handler:    _PhotoCop_GetPhotoHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "photo_cop.proto",
}
